.net core 7, C#, azure function app http trigger , azure container blob storage 

1. read 1st header row of 1.5 GB csv file from azure container blob storage 
2. if header 1st row has value "test1" at column postion 3, chnage that header value to "test2"



using System;
using System.IO;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using Azure.Storage.Blobs;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.Extensions.Logging;

public static class ModifyCSVHeaderFunction
{
    [FunctionName("ModifyCSVHeader")]
    public static async Task<IActionResult> Run(
        [HttpTrigger(AuthorizationLevel.Function, "get", "post", Route = null)] HttpRequest req,
        ILogger log)
    {
        string connectionString = Environment.GetEnvironmentVariable("AzureWebJobsStorage");
        string containerName = "your-container-name";
        string fileName = "your-file-name.csv"; // specify your CSV file name

        try
        {
            // Initialize BlobServiceClient and BlobContainerClient
            BlobServiceClient blobServiceClient = new BlobServiceClient(connectionString);
            BlobContainerClient containerClient = blobServiceClient.GetBlobContainerClient(containerName);

            // Get a reference to the blob
            BlobClient blobClient = containerClient.GetBlobClient(fileName);

            // Download the CSV file to memory stream
            MemoryStream headerStream = new MemoryStream();

            // Read the header line from the CSV file
            await blobClient.DownloadToAsync(headerStream);
            headerStream.Seek(0, SeekOrigin.Begin);

            using (StreamReader reader = new StreamReader(headerStream))
            {
                string headerLine = await reader.ReadLineAsync();
                if (headerLine != null)
                {
                    // Split the header line into columns
                    string[] columns = headerLine.Split(',');

                    // Check if the 3rd column has the value "test1"
                    if (columns.Length >= 3 && columns[2] == "test1")
                    {
                        // Create a memory stream to buffer the modified header line
                        MemoryStream modifiedHeaderStream = new MemoryStream();

                        // Change the value of the 3rd column to "test2" and write it to the modified header stream
                        columns[2] = "test2";
                        string modifiedHeaderLine = string.Join(",", columns);
                        byte[] modifiedHeaderBytes = Encoding.UTF8.GetBytes(modifiedHeaderLine);
                        modifiedHeaderStream.Write(modifiedHeaderBytes, 0, modifiedHeaderBytes.Length);
                        modifiedHeaderStream.Seek(0, SeekOrigin.Begin);

                        // Append the rest of the file to the modified header stream
                        await blobClient.DownloadToAsync(modifiedHeaderStream);
                        modifiedHeaderStream.Seek(0, SeekOrigin.Begin);

                        // Upload the modified header line and the rest of the file back to the blob
                        await blobClient.UploadAsync(modifiedHeaderStream, true);
                        return new OkObjectResult(modifiedHeaderLine);
                    }
                }
            }

            // If the header line doesn't contain "test1" in the 3rd column or there's an issue, return a message
            return new OkObjectResult("Header line does not contain 'test1' in the 3rd column.");
        }
        catch (Exception ex)
        {
            log.LogError(ex, "An error occurred while processing the request.");
            return new StatusCodeResult((int)HttpStatusCode.InternalServerError);
        }
    }
}
